class Solution
{
    
    ArrayList<Integer> search(String pat, String S)
    {
        ArrayList<Integer> ans=new ArrayList<>();
       int m=pat.length();
       int n=S.length();
       int d=256; //number of ASCII characters
       int h=1;// we store hash value of the first caracter so that we can
                 // use it while rolling hash for next substr pattern to subtract the first 
                 //value  add the new value
       int q=101; //any prime number to do modulo so to  limit the hash value into integers range
       //calculate  hash value  for first charcter it will be pow(d,m-1)%q
       for(int i=0;i<m-1;i++)
       {
        h=(h*d)%q;   
       }
       
       //now we claculate the hash value of string and the first window 
       int x=0;//pattern hash value
       int y=0;//first window hash value 
       for(int i=0;i<m;i++)
       {
        x=(d*x+pat.charAt(i))%q;
        y=(d*y+S.charAt(i))%q;
       }
       
       //now we will check for the matching hash values and then string is hash value matches 
       for(int i=0;i<=n-m;i++)
       {
           if(x==y)
           {
               int j=0;
               for(j=0;j<m;j++)
               {
                   if(pat.charAt(j)!=S.charAt(i+j))
                   break;
               }
                if(j==m)
                   ans.add(i+1);
           }
           if(i<n-m)
           y= (d*(y-S.charAt(i)*h)+S.charAt(i+m))%q;
           if(y<0)
           y=y+q;
       }
       if(ans.isEmpty())
       {
           ans.add(-1);
            return ans;
       }
       return ans;
    }    
}
