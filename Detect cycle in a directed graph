class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        boolean[] stack = new boolean[V];
        for(int i=0;i<V;i++)
        {
         if(dfs(i,adj,visited,stack))
         return true;
        }
        return false;
    }
    boolean dfs(int cv,ArrayList<ArrayList<Integer>> adj , boolean[] visited,boolean[] stack)
    {
        if(stack[cv])
        return true;
        if(visited[cv])
        return false;
        visited[cv]=true;
        stack[cv]=true;
        boolean ans=false;
        for(int i=0;i<adj.get(cv).size();i++)
        {
            int cur=adj.get(cv).get(i);
            if(dfs(cur,adj,visited,stack))
            return true;
        }
        stack[cv]=false;
        return false;
    }
    
}
