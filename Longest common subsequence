class Solution
{
    //Function to find the length of longest common subsequence in two strings.
    int [][]dp;
     int lcs(int x, int y, String s1, String s2)
    {
        dp=new int[x+5][y+5];
        for(int []arr:dp)
        {
            Arrays.fill(arr,-1);
        }
        
        return LCS(x-1,y-1,s1,s2);
    }
    
    int LCS(int x,int y, String s1, String s2)
    {
         if((x)<0)
         return 0;
         if(y<0)
         return 0;
         if(dp[x][y]!=-1)
         return dp[x][y];
         int ch1=0;
         int ch2=0;
         if(s1.charAt(x)==s2.charAt(y))
          return dp[x][y]=LCS(x-1,y-1,s1,s2)+1;
         else
         {
             ch1=LCS(x-1,y,s1,s2);
             ch2=LCS(x,y-1,s1,s2);
         }
         return dp[x][y]=Math.max(ch1,ch2);
    }
    
}


a subsequence of a string is obtained by removing one or more charcters from the string without changing there order

now when we have to find the longest common subsequence of two string then we know that the matching characters in order of the strings from both the strings will
form the longest subsequence(but they must have the same order order of character can not be change order is according to both the string)

so now for that we use recusrsive function with dp here and traverese strings from behind 
the base condition are if the we reached to  above the last of the any  string then there is no extra string to compare then we will return 0;
now there are there condition 
1- both the character matches(the we will move to next character in both the string and return the value result+1 as there we found one matching string .
2-if the strings character does not matches .....here we have two choices 
   a- we will go to next character in string s1 and will be at same position in s2;
   b-we will go to next character in string s2 and will be at same position in s1;
and retrun the maximum value from both the choices ;
