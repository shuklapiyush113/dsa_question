class Sol
{
    int countRev (String s)
    {
       Stack<Character> st=new Stack<>();
       for(int i=0;i<s.length();i++)
       {
          char c=s.charAt(i);
          if(!st.isEmpty())
          {
              if(st.peek()=='{'&&c=='}')
              st.pop();
              else
              st.push(c);
            }
          else 
          st.push(c);
       }
       
       int count=0;
       while(!st.isEmpty())
       {
           char c=st.pop();
          if(!st.isEmpty()){
           char t=st.pop();
           if((c=='{' && t=='{') ||(c=='}' && t=='}'))
           count+=1;
           else if((c=='}' && t=='{')|| (c=='{' && t=='}'))
           count+=2;
          }
          else
          return -1;
       }
       return count; 
       
       // your code here       
    }
}



more optimal solution 



class Sol
{
    int countRev (String s)
    {
     if(s.length()%2!=0)
     return -1;
     
     int count=0;
     int opn=0;
     for(int i=0;i<s.length();i++)
     {
         char c=s.charAt(i);
         if(c=='{')
         opn++;
         else
         {
             if(opn==0 && c=='}') // it means we must need to reverse this tring as we have no opening bracket for this;
             {
                count++; 
                opn++;
             }
             else
             {
                 opn--;
             }
         }
     }
     count=count+(opn/2);
     return count;
   // your code here       
    }
}

// for understanding the concept used dry  run test case "}}}}}}" 
Keep the track of the number of opening and closing braces as you traverse the sequence.
It's all fine till op â‰¥ cl.
But, as cl exceeds op, we need to do some reversals. Try fixing the unbalance as you encounter this.
