class Solution{
     int equalPartition(int N, int arr[])
    {
        int sum=0;
        for(int i=0;i<N;i++)
        {
            sum+=arr[i];
        }
        if(sum%2!=0)
        return 0;
        sum=sum/2;
        Boolean  [][]dp=new Boolean[N][sum+2];
         if(solve(0,sum,arr,dp))
         return 1;
         
         return 0;
    }
    
    boolean solve(int idx, int sum, int[] arr, Boolean [][]dp)
    {
        if(sum==0)
        return true;
        if(sum<0)
        return false;
        if(idx==arr.length)
        return false;
        
        if(dp[idx][sum]!=null)
        return dp[idx][sum];
        
        boolean pick=solve(idx+1,sum-arr[idx],arr,dp);
        boolean notpick=solve(idx+1,sum,arr,dp);
        
     return dp[idx][sum]=pick||notpick;
    }
    // we know that array can be devided into two parts when there is a subarray which have
    //sum equal to half of total sum of array in odd total sum it is not possible but in even it may be possible 
    //we have to check every subset of the array for optimization we will use dp
    
}
