class Solution {
    
	public boolean isInterLeave(String a,String b,String c)
	{
	    if(a.length()+b.length()!=c.length())
	    return false;
        Boolean [][]dp=new Boolean[a.length()+1][b.length()+1];
	    return interv(a,b,c,0,0,0,dp);
	     
	}
	
	public boolean interv(String a, String b, String c,int i, int j, int k,Boolean [][]dp)
	{
	   if(i==a.length() && j==b.length())
	   {
	       return true;
	   }
       if(dp[i][j]!=null)
        return dp[i][j];
	   if(i!=a.length() &&j==b.length())
	   {
	       if(a.charAt(i)==c.charAt(k))
	       {
	        return dp[i][j]=interv(a,b,c,i+1,j,k+1,dp);
	       }
	       else 
	       return dp[i][j]=false;
	   }
	    if(i==a.length() &&j!=b.length())
	   {
	       if(b.charAt(j)==c.charAt(k))
	       {
	           return dp[i][j]=interv(a,b,c,i,j+1,k+1,dp);
	       }
	       else 
	       return dp[i][j]=false;
	   }
	   boolean x=false;
	   boolean y=false;
	   if(a.charAt(i)==c.charAt(k))
	   {
	        x= interv(a,b,c,i+1,j,k+1,dp);
	   }
	   if(b.charAt(j)==c.charAt(k))
	   {
	         y= interv(a,b,c,i,j+1,k+1,dp);
	   }
	   return  dp[i][j]=x||y;
	}
}

//we will declare a 2D dp for every position of i,j which is of length of strings A and B.
//we have to check five condition for a single charchter of string c
//if the length of c not equals length of a+b then we will return flase as that means that we 
// can never get the desired the result
//next we check that if i and j both are above the length of a and b we will return true in dp position;
// then one of i or j are reached to maxlength
//then  wheteher the element is equal to a or b or both for that we will  
// we will return the result of  x||Y as they are storing the values coming from the condition 
